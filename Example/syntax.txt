* Strongly typed
* Manifest typed
* Try to make everything a variable

The following are literals:

	123 (<integer>)
	0x7B (u<num>)
	123b (byte,int/number)
	123.12 (float/number)
	"asdsadasd" (string)
	true (bool)
	'a' (ushort/int)


The following are constants:

	1+2
	1.0+2.3
	1.335f + 9999 + -3.5254502 + 526L

The following are valid types:
	
	numbers:
		(s)byte, (u)int, (u)long, float, double

	others:
		string,bool

How to declear a varible (not sure which one is best yet):

x := 10;
x : int = 10;
x : i32 = 10;
x : int; //defaults to zero
const x : int = 5;

//function references
// they have to be assigned to a constant function later on!
// dangling functions are not allowed! (yet)
hello : fxn             //not allowed
sum : fxn[int]          // allowed
sum : fxn[int][int,int] // allowed

//immutable functions
fxn hello (){
	println("Hello world");
}
fxn [int] sum (a:int, b:int)
{
	return a + b;
}
fxn <int> [int,int] sum (a:int, b:int)
{
	return a + b;
}

following are arrays:
	{1,2,4,5} (int array)
	{1f,2f,3f,4f} (float array)
	{1.3333,32b,2123432L,333 ,98.0000002}  (number array)

following are function types:
	fxn[int]  //int is the return type
	fxn[int][int,int]  // int is the return type and the parameter types are ints