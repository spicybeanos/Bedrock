




namespace Bedrock
{
    public class Number
    {
        public object value;

        public Type type
        {
            get
            {
                return value.GetType();
            }
        }

        public Number() { value = 0; }
        public Number(object num)
        {
            value = num;
        }
        
        public static Number operator +(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            Number res = new Number();
            try
            {
                if (type_ == typeof(double))
                {
                    double _a = Convert.ToDouble(a.value), _b = Convert.ToDouble(b.value);
                    res.value = _a + _b;
                }
                else if (type_ == typeof(float))
                {
                    res.value = (float)a.value + (float)b.value;
                }
                else if (type_ == typeof(long))
                {
                    res.value = (long)a.value + (long)b.value;
                }
                else if (type_ == typeof(int))
                {
                    res.value = (int)a.value + (int)b.value;
                }
                else if (type_ == typeof(short))
                {
                    res.value = (short)a.value + (short)b.value;
                }
                else if (type_ == typeof(byte))
                {
                    res.value = (byte)a.value + (byte)b.value;
                }
            }
            catch (Exception e)
            {
                throw new Exception($"Number a:{a.ToString()}, Number b:{b.ToString()}, Exception:\n{e}");
            }
            return res;
        }

        public static Number operator -(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            Number res = new Number();
            try
            {
                if (type_ == typeof(double))
                {
                    double _a = Convert.ToDouble(a.value), _b = Convert.ToDouble(b.value);
                    res.value = _a - _b;
                }
                else if (type_ == typeof(float))
                {
                    res.value = (float)a.value - (float)b.value;
                }
                else if (type_ == typeof(long))
                {
                    res.value = (long)a.value - (long)b.value;
                }
                else if (type_ == typeof(int))
                {
                    res.value = (int)a.value - (int)b.value;
                }
                else if (type_ == typeof(short))
                {
                    res.value = (short)a.value - (short)b.value;
                }
                else if (type_ == typeof(byte))
                {
                    res.value = (byte)a.value - (byte)b.value;
                }
            }
            catch (Exception e)
            {
                throw new Exception($"Number a:{a.ToString()}, Number b:{b.ToString()}, Exception:\n{e}");
            }
            return res;
        }

        public static Number operator *(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            Number res = new Number();
            try
            {
                if (type_ == typeof(double))
                {
                    double _a = Convert.ToDouble(a.value), _b = Convert.ToDouble(b.value);
                    res.value = _a * _b;
                }
                else if (type_ == typeof(float))
                {
                    res.value = (float)a.value * (float)b.value;
                }
                else if (type_ == typeof(long))
                {
                    res.value = (long)a.value * (long)b.value;
                }
                else if (type_ == typeof(int))
                {
                    res.value = (int)a.value * (int)b.value;
                }
                else if (type_ == typeof(short))
                {
                    res.value = (short)a.value * (short)b.value;
                }
                else if (type_ == typeof(byte))
                {
                    res.value = (byte)a.value * (byte)b.value;
                }
            }
            catch (Exception e)
            {
                throw new Exception($"Number a:{a.ToString()}, Number b:{b.ToString()}, Exception:\n{e}");
            }
            return res;
        }

        public static Number operator /(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            Number res = new Number();
            try
            {
                if (type_ == typeof(double))
                {
                    double _a = Convert.ToDouble(a.value), _b = Convert.ToDouble(b.value);
                    res.value = _a / _b;
                }
                else if (type_ == typeof(float))
                {
                    res.value = (float)a.value / (float)b.value;
                }
                else if (type_ == typeof(long))
                {
                    res.value = (long)a.value / (long)b.value;
                }
                else if (type_ == typeof(int))
                {
                    res.value = (int)a.value / (int)b.value;
                }
                else if (type_ == typeof(short))
                {
                    res.value = (short)a.value / (short)b.value;
                }
                else if (type_ == typeof(byte))
                {
                    res.value = (byte)a.value / (byte)b.value;
                }
            }
            catch (Exception e)
            {
                throw new Exception($"Number a:{a.ToString()}, Number b:{b.ToString()}, Exception:\n{e}");
            }
            return res;
        }

        public static Number operator %(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            Number res = new Number();
            try
            {
                if (type_ == typeof(long))
                {
                    res.value = (long)a.value % (long)b.value;
                }
                else if (type_ == typeof(int))
                {
                    res.value = (int)a.value % (int)b.value;
                }
                else if (type_ == typeof(short))
                {
                    res.value = (short)a.value % (short)b.value;
                }
                else if (type_ == typeof(byte))
                {
                    res.value = (byte)a.value % (byte)b.value;
                }
            }
            catch (Exception e)
            {
                throw new Exception($"Number a:{a.ToString()}, Number b:{b.ToString()}, Exception:\n{e}");
            }
            return res;
        }

        public static bool operator >(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            bool res = false;
            if (type_ == typeof(double))
            {
                res = (double)a.value > (double)b.value;
            }
            else if (type_ == typeof(float))
            {
                res = (float)a.value > (float)b.value;
            }
            else if (type_ == typeof(long))
            {
                res = (long)a.value > (long)b.value;
            }
            else if (type_ == typeof(int))
            {
                res = (int)a.value > (int)b.value;
            }
            else if (type_ == typeof(short))
            {
                res = (short)a.value > (short)b.value;
            }
            else if (type_ == typeof(byte))
            {
                res = (byte)a.value > (byte)b.value;
            }
            return res;
        }

        public static bool operator <(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            bool res = false;
            if (type_ == typeof(double))
            {
                res = (double)a.value < (double)b.value;
            }
            else if (type_ == typeof(float))
            {
                res = (float)a.value < (float)b.value;
            }
            else if (type_ == typeof(long))
            {
                res = (long)a.value < (long)b.value;
            }
            else if (type_ == typeof(int))
            {
                res = (int)a.value < (int)b.value;
            }
            else if (type_ == typeof(short))
            {
                res = (short)a.value < (short)b.value;
            }
            else if (type_ == typeof(byte))
            {
                res = (byte)a.value < (byte)b.value;
            }
            return res;
        }

        public static bool operator >=(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            bool res = false;
            if (type_ == typeof(double))
            {
                res = (double)a.value >= (double)b.value;
            }
            else if (type_ == typeof(float))
            {
                res = (float)a.value >= (float)b.value;
            }
            else if (type_ == typeof(long))
            {
                res = (long)a.value >= (long)b.value;
            }
            else if (type_ == typeof(int))
            {
                res = (int)a.value >= (int)b.value;
            }
            else if (type_ == typeof(short))
            {
                res = (short)a.value >= (short)b.value;
            }
            else if (type_ == typeof(byte))
            {
                res = (byte)a.value >= (byte)b.value;
            }
            return res;
        }

        public static bool operator <=(Number a, Number b)
        {
            Type type_ = combinedType(a.value, b.value);
            bool res = false;
            if (type_ == typeof(double))
            {
                res = (double)a.value <= (double)b.value;
            }
            else if (type_ == typeof(float))
            {
                res = (float)a.value <= (float)b.value;
            }
            else if (type_ == typeof(long))
            {
                res = (long)a.value <= (long)b.value;
            }
            else if (type_ == typeof(int))
            {
                res = (int)a.value <= (int)b.value;
            }
            else if (type_ == typeof(short))
            {
                res = (short)a.value <= (short)b.value;
            }
            else if (type_ == typeof(byte))
            {
                res = (byte)a.value <= (byte)b.value;
            }
            return res;
        }
        public static Number operator ++(Number x)
        {
            return x + 1;
        }

        public static Number operator --(Number x)
        {
            return x - 1;
        }


        public static implicit operator Number(int x) => new Number(x);
        public static implicit operator Number(long x) => new Number(x);
        public static implicit operator Number(short x) => new Number(x);
        public static implicit operator Number(byte x) => new Number(x);
        public static implicit operator Number(float x) => new Number(x);
        public static implicit operator Number(double x) => new Number(x);


        public static implicit operator int(Number x) => (int)x.value;
        public static implicit operator long(Number x) => (long)x.value;
        public static implicit operator short(Number x) => (short)x.value;
        public static implicit operator byte(Number x) => (byte)x.value;
        public static implicit operator float(Number x) => (float)x.value;
        public static implicit operator double(Number x) => (double)x.value;


        public static Number[] FromObjectsToNumbers(Object[] objs)
        {
            Number[] n = new Number[objs.Length];
            for (var i = 0; i < objs.Length; i++)
            {
                n[i] = new Number(objs[i]);
            }
            return n;
        }

        public override string ToString()
        {
            return $"{value}";
        }

        static Type combinedType(object a, object b)
        {

            if (a is double || b is double)
            {
                return typeof(double);
            }
            else if (a is float || b is float)
            {
                return typeof(float);
            }
            else if (a is long || b is long)
            {
                return typeof(long);
            }
            else if (a is short || b is short)
            {
                return typeof(short);
            }
            else if (a is byte || b is byte)
            {
                return typeof(byte);
            }
            else
            {
                return typeof(int);
            }

            throw new Exception();
        }
    }
}